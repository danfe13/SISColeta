package br.ufs.coleta.SISColeta.entities;

// Generated 25/01/2015 11:00:24 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TbColeta generated by hbm2java
 */
@Entity
@Table(name = "tb_coleta", schema = "public")
public class Coleta implements GenericEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer id;
	private MetodoColeta metodoColeta;
	private Municipio municipio;
	private TipoHabitat tipoHabitat;
	private String datum;
	private Date dataInicio;
	private Date dataFim;
	private Double latitude;
	private Double longitude;
	private Character direcaoLatitude;
	private Character direcaoLongitude;
	private Set<Colecao> colecaos = new HashSet<Colecao>(0);
	private Aquatico aquatico;
	private Set<Usuario> usuarios = new HashSet<Usuario>(0);

	public Coleta() {
	}

	public Coleta(int idtbColeta, MetodoColeta metodoColeta,
			Municipio municipio, TipoHabitat tipoHabitat) {
		this.id = idtbColeta;
		this.metodoColeta = metodoColeta;
		this.municipio = municipio;
		this.tipoHabitat = tipoHabitat;
	}

	public Coleta(int idtbColeta, MetodoColeta metodoColeta,
			Municipio municipio, TipoHabitat tipoHabitat, String datum,
			Date dataInicio, Date dataFim, Double latitude, Double longitude,
			Character direcaoLatitude, Character direcaoLongitude,
			Set<Colecao> colecaos, Aquatico aquatico,
			Set<Usuario> usuarios) {
		this.id = idtbColeta;
		this.metodoColeta = metodoColeta;
		this.municipio = municipio;
		this.tipoHabitat = tipoHabitat;
		this.datum = datum;
		this.dataInicio = dataInicio;
		this.dataFim = dataFim;
		this.latitude = latitude;
		this.longitude = longitude;
		this.direcaoLatitude = direcaoLatitude;
		this.direcaoLongitude = direcaoLongitude;
		this.colecaos = colecaos;
		this.aquatico = aquatico;
		this.usuarios = usuarios;
	}

	@Id
	@Column(name = "idtb_coleta", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tb_metodo_coleta_id", nullable = false)
	public MetodoColeta getTbMetodoColeta() {
		return this.metodoColeta;
	}

	public void setTbMetodoColeta(MetodoColeta metodoColeta) {
		this.metodoColeta = metodoColeta;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tb_municipio_id", nullable = false)
	public Municipio getTbMunicipio() {
		return this.municipio;
	}

	public void setTbMunicipio(Municipio municipio) {
		this.municipio = municipio;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tb_tipo_habitat_id", nullable = false)
	public TipoHabitat getTbTipoHabitat() {
		return this.tipoHabitat;
	}

	public void setTbTipoHabitat(TipoHabitat tipoHabitat) {
		this.tipoHabitat = tipoHabitat;
	}

	@Column(name = "datum", length = 20)
	public String getDatum() {
		return this.datum;
	}

	public void setDatum(String datum) {
		this.datum = datum;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_inicio", length = 29)
	public Date getDataInicio() {
		return this.dataInicio;
	}

	public void setDataInicio(Date dataInicio) {
		this.dataInicio = dataInicio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "data_fim", length = 29)
	public Date getDataFim() {
		return this.dataFim;
	}

	public void setDataFim(Date dataFim) {
		this.dataFim = dataFim;
	}

	@Column(name = "latitude", precision = 17, scale = 17)
	public Double getLatitude() {
		return this.latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	@Column(name = "longitude", precision = 17, scale = 17)
	public Double getLongitude() {
		return this.longitude;
	}

	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	@Column(name = "direcao_latitude", length = 1)
	public Character getDirecaoLatitude() {
		return this.direcaoLatitude;
	}

	public void setDirecaoLatitude(Character direcaoLatitude) {
		this.direcaoLatitude = direcaoLatitude;
	}

	@Column(name = "direcao_longitude", length = 1)
	public Character getDirecaoLongitude() {
		return this.direcaoLongitude;
	}

	public void setDirecaoLongitude(Character direcaoLongitude) {
		this.direcaoLongitude = direcaoLongitude;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tbColeta")
	public Set<Colecao> getTbColecaos() {
		return this.colecaos;
	}

	public void setTbColecaos(Set<Colecao> colecaos) {
		this.colecaos = colecaos;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "tbColeta")
	public Aquatico getTbAquatico() {
		return this.aquatico;
	}

	public void setTbAquatico(Aquatico aquatico) {
		this.aquatico = aquatico;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "tb_coletor", schema = "public", joinColumns = { @JoinColumn(name = "tb_coleta_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "tb_usuario_id", nullable = false, updatable = false) })
	public Set<Usuario> getTbUsuarios() {
		return this.usuarios;
	}

	public void setTbUsuarios(Set<Usuario> usuarios) {
		this.usuarios = usuarios;
	}
	
	@Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Coleta)) {
            return false;
        }
        Coleta other = (Coleta) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

}
