package br.ufs.coleta.SISColeta.entities;

// Generated 25/01/2015 11:00:24 by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.NotEmpty;

/**
 * TbRio generated by hbm2java
 */
@Entity
@Table(name = "tb_rio", schema = "public")
@NamedQueries({
	@NamedQuery(name="Rio.findByBacia", query="SELECT r FROM Rio r WHERE r.tbBacia.id = :id"),
})
public class Rio implements GenericEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer id;
	private Bacia bacia;
	private String descricao;

	public Rio() {
	}

	public Rio(int idtbRio, Bacia bacia) {
		this.id = idtbRio;
		this.bacia = bacia;
	}

	public Rio(int idtbRio, Bacia bacia, String descricao) {
		this.id = idtbRio;
		this.bacia = bacia;
		this.descricao = descricao;
	}

	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Id
	@Column(name = "idtb_rio", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "tb_bacia_id", nullable = false)
	@NotNull(message = "Campo não pode ser vázio!")
	public Bacia getTbBacia() {
		return this.bacia;
	}

	public void setTbBacia(Bacia bacia) {
		this.bacia = bacia;
	}

	@Column(name = "descricao", length = 75)
	@NotNull(message = "Campo não pode ser vázio!")
	@NotEmpty(message = "Não pode ser vázio!")
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}
	
	@Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Rio)) {
            return false;
        }
        Rio other = (Rio) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

}
